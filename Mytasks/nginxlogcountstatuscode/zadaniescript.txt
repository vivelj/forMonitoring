Скрипт:
Есть скрипт, который обрабатывает логи и выводит количество записей по $status за последний день. Поле $time_local записывается в логе разных форматах: "yyyy-MM-ddTHH:mm:ss" и "dd/MM/yy:HH:mm:ss", поэтому в скрипте каждый формат обрабатывается отдельно. При работе с большим логом (10000 записей) - скрипт выполняется около двух минут. Необходимо оптимизировать, чтобы скрипт выполнялся до 5 секунд. Использовать только Bash

Скрипт:

#!/bin/bash

log_file="test.log"
last_hour=$(date -d-1day +%s)
output_file="result.prom"

declare -A status_count

while read -r line; do
    time_local=$(echo "${line}" | awk -F'[][]' '{print $2}')
    status=$(echo "${line}" | cut -d '"' -f3 | awk '{print $1}')

    if [[ ${time_local} =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}T.* ]]; then
        if date -d"${time_local}" +%s >/dev/null 2>&1; then
            log_timestamp=$(date -d"${time_local}" +%s)
        else
            continue
        fi
    else
        formatted=$(echo ${time_local} | awk -F'[/:]' '{ print $1 " " $2 " " $3 " " $4 ":" $5 ":" $6 " " $7 }')
        if date -d"${formatted}" +%s >/dev/null 2>&1; then
            log_timestamp=$(date -d"${formatted}" +%s)
        else
            continue
        fi
    fi

    if (( log_timestamp >= last_hour )) && [[ ${status} =~ ^[0-9]{3}$ ]]; then
        let status_count[$stxatus]++
    fi
done < "${log_file}"

for status in "${!status_count[@]}"; do
    echo "ctl_nginx_status_code_count{status_code=\"$status\"} ${status_count[$status]}"
done | sort > "$output_file"


Пример лога:
10.119.55.50 - - [2023-11-01T14:12:42+0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:12:45 +0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.119.55.50 - - [2023-11-01T14:12:45+0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.119.55.50 - - [2023-11-01T14:12:46+0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.119.55.50 - - [2023-11-01T14:12:47+0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.119.55.50 - - [2023-11-01T14:12:48+0300] "GET /v1/api/statval HTTP/1.1" 202 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:12:50 +0300] "GET /v1/api/statval HTTP/1.1" 201 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:12:51 +0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:12:55 +0300] "GET /v1/api/statval HTTP/1.1" 500 2062 0.009
10.119.55.50 - - [2023-11-01T14:12:56+0300] "GET /v1/api/statval HTTP/1.1" 200 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:00+0300] "GET /v1/api/statval HTTP/1.1" 402 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:02+0300] "GET /v1/api/statval HTTP/1.1" 501 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:05+0300] "GET /v1/api/statval HTTP/1.1" 503 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:15+0300] "x16\x03\x01\x03\x00\xBF|\x99:" 503 2062 0.003
10.119.55.50 - - [2023-11-01T14:13:23+0300] "x16\x03\x01\x03\x00\xBF| \x98:" 201 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:35+0300] "x16\x03\x01\x03\x00\xBF|\x99:" 503 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:13:40 +0300] "GET /v1/api/statval HTTP/1.1" 500 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:13:41 +0300] "GET /v1/api/statval HTTP/1.1" 500 2062 0.009
10.111.55.50 - - [01/Nov/2023:14:13:42 +0300] "GET /v1/api/statval HTTP/1.1" 500 2062 0.009
10.119.55.50 - - [01/Nov/2023:14:13:43 +0300] "x16\x03\x01\x03\x00\xBF|\x99:" 503 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:45+0300] "GET /v1/api/statval HTTP/1.1" 503 2062 0.009
10.119.55.50 - - [2023-11-01T14:13:46+0300] "x16\x03\x01\x03\x00\xBF|\x98:" 201 2062 0.009
10.119.55.50 - - [06/Nov/2023:15:13:43 +0300] "x16\x03\x01\x03\x00\xBF|\x99:" 503 2062 0.009
10.119.55.50 - - [2023-11-06T15:13:46+0300] "x16\x03\x01\x03\x00\xBF|\x98:" 201 2062 0.009
10.111.55.50 - - [06/Nov/2023:15:13:47 +0300] "GET /v1/api/statval HTTP/1.1" 500 2062 0.009
10.119.55.50 - - [2023-11-06T15:13:48+0300] "GET /v1/api/statval HTTP/1.1" 402 2062 0.009ы
